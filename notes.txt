Introduction
============

Gradel is build automation tool
comiple, then run the tests
package the compiled source into packages (jar, war)
deploy and run

gradle uses groovy or kotlyn for scrippting instead of XML

gradle allow customization on how dependencies are pulled (custom rules and custom rules)

incremental builds
build cache
daemon

Every build.gradle has an object of which of the following Gradle api classes: Project
so you can use the instance: project.blabl()

to install gradle
https://gradle.org/install/

for windows use: gradlew.bat
for linux/mac: gradlew
=> w stands for "wrapper"

to make a folder a gradle project: gradle init

DSL: Domain Specific Language
we say, script DSP

gradle tasks tries to find and list and available tasks in build.gradle

to add a task:
task fistTask {
  //do something
}

using camel case allows you call the task in abrev mode
"gradle fistTask" OR "gradle fT"

gradlew file, is an executable => automatically installs gradle for the project, that way you do not need to to have a global version of gradle installed
also maintins its current version unless you update it
that way you have gradle per project
it uses the config from gradle/wrapper/gradle-wrapper.properties 

Creating a Java project
=======================
in build.gradle
include('app') => "app" name of the folder that contains src/main/... etc

gradle is not heavy
uses plugin "id 'application'" knows the tasks needed for a java project like
build, compile, generate jar, distribute as .zip... etc

gradle compileJava => generates the build folder
gradle clean => cleans/removes the build folder
gradle test => runs the unit tests

gradle test generates a summary report under: /app/build/reports/tests/test => contains an html files that shows the final report

This is how we tell gradle where the application's main method is
application {
    // Define the main class for the application.
    mainClass = 'com.bharath.gradle.App'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
} => this is used to define which repositories shoud be searched when fetching dependencies

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre' => makes the application use this JRE instead of the system JRE which makes things more stable, if removed, the app will use the system's JRE
} => this is used to specify dependencies

implementation 'com.google.guava:guava:31.0.1-jre'
com.google.guava => groupID
guava => artifactID
31.0.1-jre => Version
implementation => the scope or configurations (app vs test)

repositories can also be custom configured
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral{
      url = "..."
    }
}
as typically, organizations have their own repositories 

we also have mavenLocal()
this points to ~/.m2 => in case you have maven installed on your machine
it contains all the dependencies that have already been pulled by other projects that use maven instead of gradle
as for gradle dependencies, they are downloaded into .gradle/caches/modules-X/files-X.Y

The repositories as searched in the order they are defined

implementation and testImplementation come with the java pluggin
they allow one to control which dependencies reach the final jar/war file

Configurations
==============
gradle provides granular control
implementation
testImplementation
comipleOnly
runtimeOnly
testComipleOnly
... etc

compile => can cause leaks of dependencies from one project to another in case on project had the other as a dependency

Gradle Phases
=============
Iinitializations
Configuration
Execution

doFirst / doLast

println 'gradle rocks!!' => runs in configuration phase
task firstTask {
  println 'gradle rocks!' => runs in configuration phase
  doFirst(){
    println 'first' => runs in execution phase
  }
  doLast(){
    println 'last' runs in execution phase
  }
}

The task essentially has a list of the Closures that needs to be run and the choice of doFirst or doLast controls to which end of the list the insert goes to.
Each doFist or doLast is a closure that gets added to the list, and they are executed in order. Multiple doLast will be executed in the order they are declared while doFrist in reverse order.

using --daemon => from 2nd build and up, the build become faster
the daemon caches build infromation in memory
--no--daemon => forces gradle not to use daemon

Goovy crash course
==================
Goovy can be ran as a script without a main() method

Declaring variables:
1) inside main method: you must specify the variable's type: String s = "hello"
2) as a script wihout a main method, you do not need to sepcify the type: s = "hello"
you can also use "${s}" => this will replace $s with the value of s

for strings, single and double quotes can be used

Also multiple line Strings can be used:
S = '''
hello,
my name is groovy
!!
'''

groovy script regular expression
emailPatern = /^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/
print "test@gmail.com" ==~ emailPatern

==~ this is called the find/pattern operator

a.class => get the class type of a variable

vairables can also be defined using "def"
def u = "james"
def i = 1
but this is not recommended

Closure:
--------
c = {
    println("hello")
}

and then you invoke using .call: c.call()

parameters can be passed to closures as well:
j = { n ->
    println(n % 2 == 0 ? "even" : "odd")
}

j = { x, y, n ->
    println(n % 2 == 0 ? "even" : "odd")
}

or with default value
j = { n = 2 ->
    println(n % 2 == 0 ? "even" : "odd")
}

iterators with closures:
4.times {n->println n} => iterates on 4 (0->3) and passes it as an input argument to the closure
4.times {println it} => iterates on 4 (0->3) and prints the object being iterated on
it => a keyword in groovy that denotes the object (something similar to "this")

Collections
-----------
l = [1,2,3]
l << 4 => shift left operator, appends to list
l = l + [5,6] => append another list to the list
l = l - [3,2] => remove items from the list

some operations that can be done on lists
l.each {println(it)}
l.eachPermutation {println(it)}
l.reverseEach {println(it)}

Sets and Maps
-------------
s = ["java", "python", "js", "python"] as Set
sets do filter out duplicates

m = [james:"nounou", wiki:"susu", jiji:345]
looping over map elements
m.each {k, v ->
    println(k + ' / ' + v)
}


Methods
-------
int product(int x, int y) {
    return x*y
}

def product2(x,y) {
    x*y => the last line becomes the return statement
}

to call the methods:
product(2, 4)
result = product2 2, 4

int product3(int x = 3, int y) { => you can set default values
    return x*y
}

the syntax below also works and is used with gradle build files
void displayMap (Map productDetails){
    println productDetails.name
    println productDetails.price
}

displayMap name:"hello",price:50
displayMap(name:"hello",price:50)
displayMap([name:"hello",price:50])

Classes
-------
class Patient {
    def firstName, lastName, age

    // this setter method overrides default setter methods
    void setLastName(lastName){
        if (lastName == null){
            throw new IllegalArgumentException("Last Name can not be null!")
        }
        this.lastName = lastName
    }
}

p2 = new Patient(firstName: "john", lastName: "billo", age: 16)

Static methods and vairables can eb defined as well and accessed using the class name like in Java


Gradle Build files
===================
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

repositories is infact a method on the "project" Object to which we are passing a closure

repositories ({
    // Use Maven Central for resolving dependencies.
    mavenCentral()
})

---------------

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // value of name comes from file settings.gradle, these are project properties, more can be found at
    // https://docs.gradle.org/current/userguide/writing_build_scripts.html
    println project.name
    println project.description
    println project.version
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

if we want to set some values, we will have to do them after the plugins{...} method

when a version is defined and the project rebuilt, we will see a new jar file in app/build/libs with the version as part of the name

adding custom properties:
project.ext.xyz = "hello"
then when using it inside a method: project.xyz or project.property("xyz")

Tasks
-----
gradle has in built tasks, also some come with the java and application pluggins

task (firstTask) {
  // do something
}

OR

task firstTask {
  // do something
}

task => method on the project object, project.task(){...}
the {...} is the action block, we can have doLast({...})
the action block is a closure we are passing

anything outside doFirst() and doLast() will run in configuration phase and not in "task" phase

tasks can also be made to depend on each other
deployToStage.dependsOn deployToProd => makes deployToProd run before deployToStage
deployToProd.finalizedBy cleanUpFiles => makes cleanUpFiles run directly after deployToProd


also tasks can be set as defaults:
defaultTasks "deployToProd" => you call gradle without arguments from the terminal

Building a web app - some notes
===============================
in plugins
id 'war' => for war files
id 'org.gretty' version '4.0.0' => a simple getty server, comes with many commands
to run the project:
gradle war
gradle appRun => runs a getty server
gradle tomcatRun => runs apache tomcat sever

we can change the port
gretty.httpPort = 8082


For multi-module project
========================
you crate multiple apps inside the root folder
in settings.gradle, you include them all (i.e all the submodules), for example:
rootProject.name = 'couponapp'
include('web')
include('data')
include('integration')
include('services')

to run a command to a subproject from the root directory, run:
gralde :subProjectName:Command
=> example:
graldle :web:clean

allprojects({
    => takes a closure
    => you pass to it the task
})

example:
allprojects({
  task printProjectName {
    doLast(){
      println project.name
    }
  }
})

allprojects => reaplce with subprojects => excutes it only for the subprojects

these methods can be found in the gradle documentation related to the "Projects" object

Same build logic can be put in the parent build.gradle's file with one change
subprojects({
  apply plugin: 'application' => you use apply plugin: 'pluginName' instead of method with a closure
  version = '1.0' => apply properties to subprojects
  group = 'com.joseph.gradle' => apply properties to subprojects

  repositories {
      mavenCentral()
  }

  dependencies {
      testImplementation 'junit:junit:4.13.2'
  }
})

=> if logic is defined in a subproject's build.gradle, for example dependencies
then the subproject inherits the parent's dependencies in addition to its own
IMPORTANT: version wise, if the same dependency is defined in both places, then the one that sepcifies the highest version is taken

Making a subproject depend on another subproject
project(':web'){ => use this as when sepcifying this at root project, else simply specify the subproject as a dependency the in a another subproject the classic way
  dependencies {
    implementation project (':services')
  }
}

gradle :web:dependencies => shows the dependencies tree of subproject "web"

Unit Tests
===========
for unitests, for example jacoco, if the test fails, the build will stop and the jacoco report will not be generated
but we can still force it to be generated by adding to the build file:
test finalizedBy jacocoTestReport => jacoco is added as a pluggin: id 'jacoco'

for unit tests, you will need to mock whatever only is created at runtime
@Mock private HttpServletRequest request;
@Mock private HttpServletResponse response;
@Mock private RequestDispatcher requestDispatcher;

you can use mockito methods like:
when(response.getWriter()).thenReturn(printWriter);
when(request.getParameter("coupon")).thenReturn("SUPERSALE");
when(request.getRequestDispatcher("response.jsp")).thenReturn(requestDispatcher);
to listen to method invokations and then reply to them

you can use mockito verify to assert as well:
verify(request).setAttribute("discount", "Discount for coupon SUPERSALE is 50%"); => verifies that a request has this attribute set
verify(requestDispatcher).forward(request, response); => verifies that the "forward" method was invoked on requestDispatcher 

SonarQube
=========
=> a tool to scan an analyse the project code amongst other things
to install, download and extract .zip file
then go to the .../bin/forlderRelativeToMachine
then run it, for example, on mac: ./sonar.sh start => without input, the command will give you hints
https://www.sonarqube.org/downloads/

by default, sonarqube runs on port 9000

Go to Administration.
Then click on Configuration.
Go to Security.
Scroll down to the end and click on Force user authentication.
Now disable it and click on save.

You will not be getting this error any more now.
=> in prod environment, it would be better to actually set up a proper login and password

IMPORTANT: it is best practice to check https://plugins.gradle.org/plugin/org.sonarqube for the lines of code to add
MAIN link is: https://plugins.gradle.org/

then add it as a plugin: id 'org.sonarqube' version '3.4.0.2513'

default login pass: admin/admin
=> check the documentation for more infromation

For Jenkins Config
==================
to run jenkins, donwload, and extract, then run: java -jar jenkins.war (that is if you downloaded the .war config)
Go to Manage Jenkins -> Global Tool Configuration -> Gradle -> configure it (install autoamtically or point to system gradle)
on mac (if installed with brew): /usr/local/Cellar/gradle/7.5.1_1/libexec

The create a new item "Freestyle Project"
in build step: Invoke Gradle Script
pick the gradle version you added in global config
set Tasks to: clean build (add any other if you want)
click "Advanced" -> Build file -> point it to build.gradle
Root Build Script -> you use this if you have a multi-project

Spring Boot
===========
Use the IDE's spring initializer to set up the project
spring comes with manny libraries that can be set such as "Spring Web" for RESTful API

the add a simple controller, for example
package com.joseph.gradle;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController => you add this
public class HelloGradle {

    @GetMapping("/hello") => you add this
    public String hello() {
        return "spring boot with gradle is super easy";
    }
}

the you run: gradle bootRun => check console to see where server is running
then visit it, for example: http://localhost:8080/hello

id 'io.spring.dependency-management' version '1.0.14.RELEASE' => this pluggin has BOM (Bill of Materials), it has all the info needed on which of the dependencies' versions to use

sourceCompatibility = '11' => sets the compatible Java version

Migrate Maven Project to Gradle
===============================
go to folder with pom.xml 
run gradle init => it autodetects the pom.xml file and asks you if you want to use to generate the gradle files
what will be missing are:
1) the spring boot pluggins if any (check others if any)
2) once added (they contain BOM), you can remove the explicit versions from the dependencies

BOMs can also be added inside the dependencies closure
dependencies {
    // import a BOM
    implementation platform('org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE')

    // define dependencies without versions
    implementation 'com.google.code.gson:gson'
    implementation 'dom4j:dom4j'
}

Create a Gradle Pluggin 
=======================
every gradle pluggin needs to implement the Pluggin<T> interface
T can be Project, Settings, Gradle
this only has 1 method that needs to be implemented "apply(T t)"
you can then add as many tasks as you want, an implement the logic inside them with doFirst() and doLast(), mainly the latter

once imported in to the build file, the tasks become like any other tasks, you can make them depend on each other... etc
then simply apply the plugin:
apply plugin: MyAWSPlugin

to move script to buildSrc/src/main/groovy -> this should be as the same level as the "app" folder
put it in a .groovy file
import what you need, for example
import org.gradle.api.Plugin
import org.gradle.api.Project

make sure to specify a package for your file, for example
package src.main.groovy

Then in the build.gradle file,
import it: import src.main.groovy.MyAWSPlugin
and apply it: apply plugin: MyAWSPlugin

this will also end up getting build a .jar file and can be found in build/libs/